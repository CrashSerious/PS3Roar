/* thanx to Jouni Korhonen for this file
 * Modified by Ciaran Anscomb for use with XRoar
 */

struct threeMap {
        unsigned char key;
        const char *map1;
        const char *map2;
};

struct threeMap cha01KeyMap[] = {
        {'1',     "1\",20\r",			"0c1111111111111111\"\r"},
        {'2',     "2\",20\r",			"1c222222222\"\r"},
        {'3',     "3\",20\r",			"1c333333\"\r"},
        {'4',     "4\",20\r",			"1c44444\"\r"},
        {'5',     "5\",20\r",			"1c5555\"\r"},
        {'6',     "6\",20\r",			"1c66666666\"\r"},
        {'7',     "7\",20\r",			"1c777777\"\r"},
        {'8',     "8\",20\r",			"1c888888\"\r"},
        {'9',     "9\",20\r",			"1c99999\"\r"},
        {'0',     "0\",20\r",			"1c0000000000000\"\r"},
        {'\r',    "eee\"\r",			"c\"\r"}, // backspace
        {128+'1', "1111\"\r",			"0c1111\"\r"}, // !
        {'@',     "000\"\r",			"1c000\"\r"}, // @
        {128+'3', "#\"\r",			"1c#\"\r"}, // #
        {128+'4', "0000000\"\r",		"1c0000000\"\r"}, // $
        {128+'5', "000000\"\r",			"1c000000\"\r"}, // %
        {128+'/', "111\"\r",			"0c111\"\r"}, // ?
        {128+'6', "00\"\r",			"1c00\"\r"}, // &
        {128+':', "##\"\r",			"1c##\"\r"}, // *
        {128+'8', "11111111111111\"\r",		"0c11111111111111\"\r"}, // (
        {128+'9', "111111111111111\"\r",	"0c111111111111111\"\r"}, // )
        {'Q',     "77\"\r",			"1c77\"\r"},
        {'W',     "9\"\r",			"1c9\"\r"},
        {'E',     "33\"\r",			"1c33\"\r"},
        {'R',     "777\"\r",			"1c777\"\r"},
        {'T',     "8\"\r",			"1c8\"\r"},
        {'Y',     "999\"\r",			"1c999\"\r"},
        {'U',     "88\"\r",			"1c88\"\r"},
        {'I',     "444\"\r",			"1c444\"\r"},
        {'O',     "666\"\r",			"1c666\"\r"},
        {'P',     "7\"\r",			"1c7\"\r"},
        {'A',     "2\"\r",			"1c2\"\r"},
        {'S',     "7777\"\r",			"1c7777\"\r"},
        {'D',     "3\"\r",			"1c3\"\r"},
        {'F',     "333\"\r",			"1c333\"\r"},
        {'G',     "4\"\r",			"1c4\"\r"},
        {'H',     "44\"\r",			"1c44\"\r"},
        {'J',     "5\"\r",			"1c5\"\r"},
        {'K',     "55\"\r",			"1c55\"\r"},
        {'L',     "555\"\r",			"1c555\"\r"},
        {'Z',     "9999\"\r",			"1c9999\"\r"},
        {'X',     "99\"\r",			"1c99\"\r"},
        {'C',     "222\"\r",			"1c222\"\r"},
        {'V',     "888\"\r",			"1c888\"\r"},
        {'B',     "22\"\r",			"1c22\"\r"},
        {'N',     "66\"\r",			"1c66\"\r"},
        {'M',     "6\"\r",			"1c6\"\r"},
        {'.',     "111111\"\r",			"0c111111\"\r"},
        {8,       "<\"\r",			"<\"\r"}, // left
        {9,       ">\"\r",			">\"\r"}, // right
        {' ',     "1\"\r",			"0c1\"\r"}, // space
        {'^',     "2222222\"\r",		"1c2222222\"\r"}, // À
        {'?',     "22222222\"\r",		"1c22222222\"\r"}, // Ç
        {128+'-', "3333\"\r",			"1c3333\"\r"}, // È
        {'?',     "33333\"\r",			"1c3333\"\r"}, // É
        {'?',     "4444\"\r",			"1c4444\"\r"}, // Ì
        {':',     "1111111\"\r",		"0c1111111\"\r"}, // :
        {128+8,   "6666\"\r",			"1c6666\"\r"}, // Ñ
        {'?',     "6666666\"\r",		"1c6666666\"\r"}, // Ò
        {8,       "77777\"\r",			"1c77777\"\r"}, // ß
        {9,       "8888\"\r",			"1c8888\"\r"}, // Ü
        {10,      "88888\"\r",			"1c88888\"\r"}, // Ù
        {128+'@', "2222\"\r",			"1c2222\"\r"}, // Å
        {128+'7', "1111111111\"\r",		"0c1111111111\"\r"}, // '
        {'?',     "222222\"\r",			"1c222222\"\r"}, // Æ
        {128+'2', "111111111\"\r",		"0c111111111\"\r"}, // "
        {128+8,   "666666\"\r",			"1c666666\"\r"}, // Ø
        {128+10,  "00000000\"\r",		"1c00000000\"\r"}, // £
        {128+'^', "66666\"\r",			"1c66666\"\r"}, // Ö
        {128+9,   "22222\"\r",			"1c22222\"\r"}, // Ä
        {128+';', "0\"\r",			"1c0\"\r"}, // +
        {'-',     "11\"\r",			"0c11\"\r"}, // -
        {27,      "00000000000000000\"\r",	"1c00000000000000000\"\r"},//ohm
        {12,      "0000000000000000\"\r",	"1c0000000000000000\"\r"}, //psi
        {'/',     "0000\"\r",			"1c0000\"\r"}, // slash
        {128+',', "7777777\"\r",		"1c7777777\"\r"}, // pi
        {128+'.', "77777777\"\r",		"1c77777777\"\r"}, // sigma
        {',',     "11111\"\r",			"0c11111\"\r"}, // comma
        { 0, NULL, NULL }
};

